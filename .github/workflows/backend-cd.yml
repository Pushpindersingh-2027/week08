name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:

jobs:
  deploy_backend:
    runs-on: ubuntu-latest

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP:   ${{ steps.get_order_ip.outputs.external_ip }}

    env:
      AZ_RG:  ${{ secrets.AZURE_RG }}
      AKS:    ${{ secrets.AKS_CLUSTER }}
      ACR:    ${{ secrets.ACR_NAME }}

      PRODUCT_LABEL: app=product-service
      ORDER_LABEL:   app=order-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AZ_RG }}
          cluster-name:   ${{ env.AKS }}

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        working-directory: k8s
        run: |
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        working-directory: k8s
        run: |
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Show services
        run: kubectl get svc -o wide

      - name: Wait for Backend LoadBalancer IPs (max ~5 min)
        shell: bash
        run: |
          set -euo pipefail
          PRODUCT_SVC=$(kubectl get svc -l "${PRODUCT_LABEL}" -o jsonpath='{.items[0].metadata.name}')
          ORDER_SVC=$(kubectl get svc -l "${ORDER_LABEL}" -o jsonpath='{.items[0].metadata.name}')
          echo "Discovered product service: ${PRODUCT_SVC}"
          echo "Discovered order   service: ${ORDER_SVC}"

          for i in {1..60}; do
            echo "Attempt $i/60..."
            PRODUCT_IP=$(kubectl get svc "${PRODUCT_SVC}" -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            ORDER_IP=$(kubectl get svc "${ORDER_SVC}"   -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)

            if [[ -n "${PRODUCT_IP}" && -n "${ORDER_IP}" ]]; then
              echo "Product IP: ${PRODUCT_IP}"
              echo "Order IP:   ${ORDER_IP}"
              echo "PRODUCT_IP=${PRODUCT_IP}" >> $GITHUB_ENV
              echo "ORDER_IP=${ORDER_IP}"     >> $GITHUB_ENV
              exit 0
            fi
            sleep 5
          done

          echo "Timed out waiting for LoadBalancer IPs."
          kubectl get svc -o wide
          exit 1

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        if: always()
        run: az logout
